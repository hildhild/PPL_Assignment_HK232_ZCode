# Generated from d://STUDY//UNIVERSITY//HK232//NGUYEN LY NGON NGU LAP TRINH//ASS1//assignment1//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,52,390,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,2,57,7,57,1,0,1,
        0,3,0,120,8,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,
        3,1,3,1,3,1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,
        5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,
        8,1,8,1,8,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,11,1,
        11,1,11,1,11,1,11,1,11,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,
        13,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,14,1,15,1,15,1,15,1,
        16,1,16,1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,
        18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,
        23,1,23,1,24,1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,
        27,1,27,1,28,1,28,1,29,1,29,1,29,1,30,1,30,1,30,1,31,1,31,1,32,1,
        32,1,32,1,33,1,33,1,34,1,34,1,34,1,35,1,35,1,35,1,35,1,36,1,36,1,
        36,1,37,1,37,1,38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,5,
        42,285,8,42,10,42,12,42,288,9,42,1,43,4,43,291,8,43,11,43,12,43,
        292,1,44,1,44,5,44,297,8,44,10,44,12,44,300,9,44,1,45,1,45,3,45,
        304,8,45,1,45,4,45,307,8,45,11,45,12,45,308,1,46,1,46,3,46,313,8,
        46,1,46,3,46,316,8,46,1,47,1,47,1,47,1,47,3,47,322,8,47,1,48,1,48,
        1,48,1,49,1,49,5,49,329,8,49,10,49,12,49,332,9,49,1,49,1,49,1,49,
        1,50,1,50,1,51,1,51,1,51,1,51,5,51,343,8,51,10,51,12,51,346,9,51,
        1,51,1,51,1,52,4,52,351,8,52,11,52,12,52,352,1,52,1,52,1,53,1,53,
        1,53,1,53,1,54,1,54,5,54,363,8,54,10,54,12,54,366,9,54,1,54,1,54,
        1,54,3,54,371,8,54,1,54,1,54,1,55,1,55,1,55,1,56,1,56,5,56,380,8,
        56,10,56,12,56,383,9,56,1,56,1,56,1,56,1,57,1,57,1,57,0,0,58,1,1,
        3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,
        29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,47,24,49,25,
        51,26,53,27,55,28,57,29,59,30,61,31,63,32,65,33,67,34,69,35,71,36,
        73,37,75,38,77,39,79,40,81,41,83,42,85,43,87,0,89,0,91,0,93,44,95,
        0,97,0,99,45,101,46,103,47,105,48,107,49,109,50,111,0,113,51,115,
        52,1,0,10,3,0,65,90,95,95,97,122,4,0,48,57,65,90,95,95,97,122,1,
        0,48,57,2,0,69,69,101,101,2,0,43,43,45,45,4,0,10,10,12,13,34,34,
        92,92,7,0,39,39,92,92,98,98,102,102,110,110,114,114,116,116,2,0,
        10,10,12,13,3,0,8,9,12,12,32,32,1,1,10,10,399,0,1,1,0,0,0,0,3,1,
        0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,
        0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,
        0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,
        0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,
        0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,
        0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,
        0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,
        0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,0,81,1,0,0,0,0,83,1,0,
        0,0,0,85,1,0,0,0,0,93,1,0,0,0,0,99,1,0,0,0,0,101,1,0,0,0,0,103,1,
        0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,109,1,0,0,0,0,113,1,0,0,0,0,
        115,1,0,0,0,1,119,1,0,0,0,3,121,1,0,0,0,5,126,1,0,0,0,7,132,1,0,
        0,0,9,139,1,0,0,0,11,144,1,0,0,0,13,151,1,0,0,0,15,158,1,0,0,0,17,
        162,1,0,0,0,19,170,1,0,0,0,21,175,1,0,0,0,23,179,1,0,0,0,25,185,
        1,0,0,0,27,188,1,0,0,0,29,194,1,0,0,0,31,203,1,0,0,0,33,206,1,0,
        0,0,35,211,1,0,0,0,37,216,1,0,0,0,39,222,1,0,0,0,41,226,1,0,0,0,
        43,228,1,0,0,0,45,230,1,0,0,0,47,232,1,0,0,0,49,234,1,0,0,0,51,236,
        1,0,0,0,53,240,1,0,0,0,55,244,1,0,0,0,57,247,1,0,0,0,59,249,1,0,
        0,0,61,252,1,0,0,0,63,255,1,0,0,0,65,257,1,0,0,0,67,260,1,0,0,0,
        69,262,1,0,0,0,71,265,1,0,0,0,73,269,1,0,0,0,75,272,1,0,0,0,77,274,
        1,0,0,0,79,276,1,0,0,0,81,278,1,0,0,0,83,280,1,0,0,0,85,282,1,0,
        0,0,87,290,1,0,0,0,89,294,1,0,0,0,91,301,1,0,0,0,93,310,1,0,0,0,
        95,321,1,0,0,0,97,323,1,0,0,0,99,326,1,0,0,0,101,336,1,0,0,0,103,
        338,1,0,0,0,105,350,1,0,0,0,107,356,1,0,0,0,109,360,1,0,0,0,111,
        374,1,0,0,0,113,377,1,0,0,0,115,387,1,0,0,0,117,120,3,3,1,0,118,
        120,3,5,2,0,119,117,1,0,0,0,119,118,1,0,0,0,120,2,1,0,0,0,121,122,
        5,116,0,0,122,123,5,114,0,0,123,124,5,117,0,0,124,125,5,101,0,0,
        125,4,1,0,0,0,126,127,5,102,0,0,127,128,5,97,0,0,128,129,5,108,0,
        0,129,130,5,115,0,0,130,131,5,101,0,0,131,6,1,0,0,0,132,133,5,110,
        0,0,133,134,5,117,0,0,134,135,5,109,0,0,135,136,5,98,0,0,136,137,
        5,101,0,0,137,138,5,114,0,0,138,8,1,0,0,0,139,140,5,98,0,0,140,141,
        5,111,0,0,141,142,5,111,0,0,142,143,5,108,0,0,143,10,1,0,0,0,144,
        145,5,115,0,0,145,146,5,116,0,0,146,147,5,114,0,0,147,148,5,105,
        0,0,148,149,5,110,0,0,149,150,5,103,0,0,150,12,1,0,0,0,151,152,5,
        114,0,0,152,153,5,101,0,0,153,154,5,116,0,0,154,155,5,117,0,0,155,
        156,5,114,0,0,156,157,5,110,0,0,157,14,1,0,0,0,158,159,5,118,0,0,
        159,160,5,97,0,0,160,161,5,114,0,0,161,16,1,0,0,0,162,163,5,100,
        0,0,163,164,5,121,0,0,164,165,5,110,0,0,165,166,5,97,0,0,166,167,
        5,109,0,0,167,168,5,105,0,0,168,169,5,99,0,0,169,18,1,0,0,0,170,
        171,5,102,0,0,171,172,5,117,0,0,172,173,5,110,0,0,173,174,5,99,0,
        0,174,20,1,0,0,0,175,176,5,102,0,0,176,177,5,111,0,0,177,178,5,114,
        0,0,178,22,1,0,0,0,179,180,5,117,0,0,180,181,5,110,0,0,181,182,5,
        116,0,0,182,183,5,105,0,0,183,184,5,108,0,0,184,24,1,0,0,0,185,186,
        5,98,0,0,186,187,5,121,0,0,187,26,1,0,0,0,188,189,5,98,0,0,189,190,
        5,114,0,0,190,191,5,101,0,0,191,192,5,97,0,0,192,193,5,107,0,0,193,
        28,1,0,0,0,194,195,5,99,0,0,195,196,5,111,0,0,196,197,5,110,0,0,
        197,198,5,116,0,0,198,199,5,105,0,0,199,200,5,110,0,0,200,201,5,
        117,0,0,201,202,5,101,0,0,202,30,1,0,0,0,203,204,5,105,0,0,204,205,
        5,102,0,0,205,32,1,0,0,0,206,207,5,101,0,0,207,208,5,108,0,0,208,
        209,5,115,0,0,209,210,5,101,0,0,210,34,1,0,0,0,211,212,5,101,0,0,
        212,213,5,108,0,0,213,214,5,105,0,0,214,215,5,102,0,0,215,36,1,0,
        0,0,216,217,5,98,0,0,217,218,5,101,0,0,218,219,5,103,0,0,219,220,
        5,105,0,0,220,221,5,110,0,0,221,38,1,0,0,0,222,223,5,101,0,0,223,
        224,5,110,0,0,224,225,5,100,0,0,225,40,1,0,0,0,226,227,5,43,0,0,
        227,42,1,0,0,0,228,229,5,45,0,0,229,44,1,0,0,0,230,231,5,42,0,0,
        231,46,1,0,0,0,232,233,5,47,0,0,233,48,1,0,0,0,234,235,5,37,0,0,
        235,50,1,0,0,0,236,237,5,110,0,0,237,238,5,111,0,0,238,239,5,116,
        0,0,239,52,1,0,0,0,240,241,5,97,0,0,241,242,5,110,0,0,242,243,5,
        100,0,0,243,54,1,0,0,0,244,245,5,111,0,0,245,246,5,114,0,0,246,56,
        1,0,0,0,247,248,5,61,0,0,248,58,1,0,0,0,249,250,5,60,0,0,250,251,
        5,45,0,0,251,60,1,0,0,0,252,253,5,33,0,0,253,254,5,61,0,0,254,62,
        1,0,0,0,255,256,5,60,0,0,256,64,1,0,0,0,257,258,5,60,0,0,258,259,
        5,61,0,0,259,66,1,0,0,0,260,261,5,62,0,0,261,68,1,0,0,0,262,263,
        5,62,0,0,263,264,5,61,0,0,264,70,1,0,0,0,265,266,5,46,0,0,266,267,
        5,46,0,0,267,268,5,46,0,0,268,72,1,0,0,0,269,270,5,61,0,0,270,271,
        5,61,0,0,271,74,1,0,0,0,272,273,5,40,0,0,273,76,1,0,0,0,274,275,
        5,41,0,0,275,78,1,0,0,0,276,277,5,91,0,0,277,80,1,0,0,0,278,279,
        5,93,0,0,279,82,1,0,0,0,280,281,5,44,0,0,281,84,1,0,0,0,282,286,
        7,0,0,0,283,285,7,1,0,0,284,283,1,0,0,0,285,288,1,0,0,0,286,284,
        1,0,0,0,286,287,1,0,0,0,287,86,1,0,0,0,288,286,1,0,0,0,289,291,7,
        2,0,0,290,289,1,0,0,0,291,292,1,0,0,0,292,290,1,0,0,0,292,293,1,
        0,0,0,293,88,1,0,0,0,294,298,5,46,0,0,295,297,7,2,0,0,296,295,1,
        0,0,0,297,300,1,0,0,0,298,296,1,0,0,0,298,299,1,0,0,0,299,90,1,0,
        0,0,300,298,1,0,0,0,301,303,7,3,0,0,302,304,7,4,0,0,303,302,1,0,
        0,0,303,304,1,0,0,0,304,306,1,0,0,0,305,307,7,2,0,0,306,305,1,0,
        0,0,307,308,1,0,0,0,308,306,1,0,0,0,308,309,1,0,0,0,309,92,1,0,0,
        0,310,312,3,87,43,0,311,313,3,89,44,0,312,311,1,0,0,0,312,313,1,
        0,0,0,313,315,1,0,0,0,314,316,3,91,45,0,315,314,1,0,0,0,315,316,
        1,0,0,0,316,94,1,0,0,0,317,322,8,5,0,0,318,322,3,97,48,0,319,320,
        5,39,0,0,320,322,5,34,0,0,321,317,1,0,0,0,321,318,1,0,0,0,321,319,
        1,0,0,0,322,96,1,0,0,0,323,324,5,92,0,0,324,325,7,6,0,0,325,98,1,
        0,0,0,326,330,5,34,0,0,327,329,3,95,47,0,328,327,1,0,0,0,329,332,
        1,0,0,0,330,328,1,0,0,0,330,331,1,0,0,0,331,333,1,0,0,0,332,330,
        1,0,0,0,333,334,5,34,0,0,334,335,6,49,0,0,335,100,1,0,0,0,336,337,
        5,10,0,0,337,102,1,0,0,0,338,339,5,35,0,0,339,340,5,35,0,0,340,344,
        1,0,0,0,341,343,8,7,0,0,342,341,1,0,0,0,343,346,1,0,0,0,344,342,
        1,0,0,0,344,345,1,0,0,0,345,347,1,0,0,0,346,344,1,0,0,0,347,348,
        6,51,1,0,348,104,1,0,0,0,349,351,7,8,0,0,350,349,1,0,0,0,351,352,
        1,0,0,0,352,350,1,0,0,0,352,353,1,0,0,0,353,354,1,0,0,0,354,355,
        6,52,1,0,355,106,1,0,0,0,356,357,5,13,0,0,357,358,1,0,0,0,358,359,
        6,53,1,0,359,108,1,0,0,0,360,364,5,34,0,0,361,363,3,95,47,0,362,
        361,1,0,0,0,363,366,1,0,0,0,364,362,1,0,0,0,364,365,1,0,0,0,365,
        370,1,0,0,0,366,364,1,0,0,0,367,371,7,9,0,0,368,369,5,13,0,0,369,
        371,5,10,0,0,370,367,1,0,0,0,370,368,1,0,0,0,371,372,1,0,0,0,372,
        373,6,54,2,0,373,110,1,0,0,0,374,375,5,92,0,0,375,376,8,6,0,0,376,
        112,1,0,0,0,377,381,5,34,0,0,378,380,3,95,47,0,379,378,1,0,0,0,380,
        383,1,0,0,0,381,379,1,0,0,0,381,382,1,0,0,0,382,384,1,0,0,0,383,
        381,1,0,0,0,384,385,3,111,55,0,385,386,6,56,3,0,386,114,1,0,0,0,
        387,388,9,0,0,0,388,389,6,57,4,0,389,116,1,0,0,0,16,0,119,286,292,
        298,303,308,312,315,321,330,344,352,364,370,381,5,1,49,0,6,0,0,1,
        54,1,1,56,2,1,57,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    BOOL_LIT = 1
    TRUE = 2
    FALSE = 3
    NUMBER = 4
    BOOL = 5
    STRING = 6
    RETURN = 7
    VAR = 8
    DYNAMIC = 9
    FUNC = 10
    FOR = 11
    UNTIL = 12
    BY = 13
    BREAK = 14
    CONTINUE = 15
    IF = 16
    ELSE = 17
    ELIF = 18
    BEGIN = 19
    END = 20
    ADD = 21
    SUB = 22
    MUL = 23
    DIV = 24
    MOD = 25
    NOT = 26
    AND = 27
    OR = 28
    EQUAL = 29
    ASSIGN = 30
    DIFF = 31
    LT = 32
    LTE = 33
    GT = 34
    GTE = 35
    CONCAT = 36
    COMPARE = 37
    LP = 38
    RP = 39
    LSB = 40
    RSB = 41
    COMMA = 42
    ID = 43
    NUMBER_LIT = 44
    STR_LIT = 45
    NEWLINE = 46
    COMMENTS = 47
    WS = 48
    CR = 49
    UNCLOSE_STRING = 50
    ILLEGAL_ESCAPE = 51
    ERROR_CHAR = 52

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'+'", "'-'", "'*'", "'/'", "'%'", "'not'", "'and'", 
            "'or'", "'='", "'<-'", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'...'", "'=='", "'('", "')'", "'['", "']'", "','", "'\\n'", 
            "'\\r'" ]

    symbolicNames = [ "<INVALID>",
            "BOOL_LIT", "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", 
            "VAR", "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
            "IF", "ELSE", "ELIF", "BEGIN", "END", "ADD", "SUB", "MUL", "DIV", 
            "MOD", "NOT", "AND", "OR", "EQUAL", "ASSIGN", "DIFF", "LT", 
            "LTE", "GT", "GTE", "CONCAT", "COMPARE", "LP", "RP", "LSB", 
            "RSB", "COMMA", "ID", "NUMBER_LIT", "STR_LIT", "NEWLINE", "COMMENTS", 
            "WS", "CR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "BOOL_LIT", "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", 
                  "RETURN", "VAR", "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", 
                  "BREAK", "CONTINUE", "IF", "ELSE", "ELIF", "BEGIN", "END", 
                  "ADD", "SUB", "MUL", "DIV", "MOD", "NOT", "AND", "OR", 
                  "EQUAL", "ASSIGN", "DIFF", "LT", "LTE", "GT", "GTE", "CONCAT", 
                  "COMPARE", "LP", "RP", "LSB", "RSB", "COMMA", "ID", "INTERGER", 
                  "DECIMAL", "EXPONENT", "NUMBER_LIT", "STR_CHAR", "ESC_SEQ", 
                  "STR_LIT", "NEWLINE", "COMMENTS", "WS", "CR", "UNCLOSE_STRING", 
                  "ILLEGAL_ESC", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[49] = self.STR_LIT_action 
            actions[54] = self.UNCLOSE_STRING_action 
            actions[56] = self.ILLEGAL_ESCAPE_action 
            actions[57] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STR_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            if self.text[-1] == '\n':
            	if self.text[-2] == '\r':
            		raise UncloseString(self.text[1:-2]);
            	else:
            		raise UncloseString(self.text[1:-1]);
            else:
            	raise UncloseString(self.text[1:]);

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise IllegalEscape(self.text[1:])
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


