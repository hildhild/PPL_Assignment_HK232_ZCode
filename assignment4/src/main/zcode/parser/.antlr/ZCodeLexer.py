# Generated from d://STUDY//UNIVERSITY//HK232//NGUYEN LY NGON NGU LAP TRINH//ASS4//assignment4-initial//src//main//zcode//parser//ZCode.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from lexererr import *


def serializedATN():
    return [
        4,0,51,384,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,
        26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,
        32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,
        39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,
        45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,
        52,7,52,2,53,7,53,2,54,7,54,2,55,7,55,2,56,7,56,1,0,1,0,1,0,1,0,
        1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,2,1,2,1,2,1,2,1,2,1,3,1,3,
        1,3,1,3,1,3,1,4,1,4,1,4,1,4,1,4,1,4,1,4,1,5,1,5,1,5,1,5,1,5,1,5,
        1,5,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,10,1,10,1,11,1,11,
        1,11,1,12,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,1,13,1,13,1,13,
        1,13,1,13,1,13,1,14,1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,
        1,16,1,16,1,16,1,17,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,
        1,19,1,19,1,20,1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,24,1,24,1,24,
        1,24,1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,27,1,27,1,28,1,28,1,28,
        1,29,1,29,1,29,1,30,1,30,1,31,1,31,1,31,1,32,1,32,1,33,1,33,1,33,
        1,34,1,34,1,34,1,34,1,35,1,35,1,35,1,36,1,36,1,37,1,37,1,38,1,38,
        1,39,1,39,1,40,1,40,1,41,1,41,5,41,279,8,41,10,41,12,41,282,9,41,
        1,42,4,42,285,8,42,11,42,12,42,286,1,43,1,43,5,43,291,8,43,10,43,
        12,43,294,9,43,1,44,1,44,3,44,298,8,44,1,44,4,44,301,8,44,11,44,
        12,44,302,1,45,1,45,3,45,307,8,45,1,45,3,45,310,8,45,1,46,1,46,1,
        46,1,46,3,46,316,8,46,1,47,1,47,1,47,1,48,1,48,5,48,323,8,48,10,
        48,12,48,326,9,48,1,48,1,48,1,48,1,49,1,49,1,50,1,50,1,50,1,50,5,
        50,337,8,50,10,50,12,50,340,9,50,1,50,1,50,1,51,4,51,345,8,51,11,
        51,12,51,346,1,51,1,51,1,52,1,52,1,52,1,52,1,53,1,53,5,53,357,8,
        53,10,53,12,53,360,9,53,1,53,1,53,1,53,3,53,365,8,53,1,53,1,53,1,
        54,1,54,1,54,1,55,1,55,5,55,374,8,55,10,55,12,55,377,9,55,1,55,1,
        55,1,55,1,56,1,56,1,56,0,0,57,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,
        17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,16,33,17,35,18,37,19,
        39,20,41,21,43,22,45,23,47,24,49,25,51,26,53,27,55,28,57,29,59,30,
        61,31,63,32,65,33,67,34,69,35,71,36,73,37,75,38,77,39,79,40,81,41,
        83,42,85,0,87,0,89,0,91,43,93,0,95,0,97,44,99,45,101,46,103,47,105,
        48,107,49,109,0,111,50,113,51,1,0,10,3,0,65,90,95,95,97,122,4,0,
        48,57,65,90,95,95,97,122,1,0,48,57,2,0,69,69,101,101,2,0,43,43,45,
        45,4,0,10,10,12,13,34,34,92,92,7,0,39,39,92,92,98,98,102,102,110,
        110,114,114,116,116,2,0,10,10,12,13,3,0,8,9,12,12,32,32,1,1,10,10,
        392,0,1,1,0,0,0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,
        0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,
        0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,
        0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,
        0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,
        0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,0,57,1,0,0,0,0,59,1,0,0,0,
        0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,0,67,1,0,0,0,0,69,1,0,0,0,
        0,71,1,0,0,0,0,73,1,0,0,0,0,75,1,0,0,0,0,77,1,0,0,0,0,79,1,0,0,0,
        0,81,1,0,0,0,0,83,1,0,0,0,0,91,1,0,0,0,0,97,1,0,0,0,0,99,1,0,0,0,
        0,101,1,0,0,0,0,103,1,0,0,0,0,105,1,0,0,0,0,107,1,0,0,0,0,111,1,
        0,0,0,0,113,1,0,0,0,1,115,1,0,0,0,3,120,1,0,0,0,5,126,1,0,0,0,7,
        133,1,0,0,0,9,138,1,0,0,0,11,145,1,0,0,0,13,152,1,0,0,0,15,156,1,
        0,0,0,17,164,1,0,0,0,19,169,1,0,0,0,21,173,1,0,0,0,23,179,1,0,0,
        0,25,182,1,0,0,0,27,188,1,0,0,0,29,197,1,0,0,0,31,200,1,0,0,0,33,
        205,1,0,0,0,35,210,1,0,0,0,37,216,1,0,0,0,39,220,1,0,0,0,41,222,
        1,0,0,0,43,224,1,0,0,0,45,226,1,0,0,0,47,228,1,0,0,0,49,230,1,0,
        0,0,51,234,1,0,0,0,53,238,1,0,0,0,55,241,1,0,0,0,57,243,1,0,0,0,
        59,246,1,0,0,0,61,249,1,0,0,0,63,251,1,0,0,0,65,254,1,0,0,0,67,256,
        1,0,0,0,69,259,1,0,0,0,71,263,1,0,0,0,73,266,1,0,0,0,75,268,1,0,
        0,0,77,270,1,0,0,0,79,272,1,0,0,0,81,274,1,0,0,0,83,276,1,0,0,0,
        85,284,1,0,0,0,87,288,1,0,0,0,89,295,1,0,0,0,91,304,1,0,0,0,93,315,
        1,0,0,0,95,317,1,0,0,0,97,320,1,0,0,0,99,330,1,0,0,0,101,332,1,0,
        0,0,103,344,1,0,0,0,105,350,1,0,0,0,107,354,1,0,0,0,109,368,1,0,
        0,0,111,371,1,0,0,0,113,381,1,0,0,0,115,116,5,116,0,0,116,117,5,
        114,0,0,117,118,5,117,0,0,118,119,5,101,0,0,119,2,1,0,0,0,120,121,
        5,102,0,0,121,122,5,97,0,0,122,123,5,108,0,0,123,124,5,115,0,0,124,
        125,5,101,0,0,125,4,1,0,0,0,126,127,5,110,0,0,127,128,5,117,0,0,
        128,129,5,109,0,0,129,130,5,98,0,0,130,131,5,101,0,0,131,132,5,114,
        0,0,132,6,1,0,0,0,133,134,5,98,0,0,134,135,5,111,0,0,135,136,5,111,
        0,0,136,137,5,108,0,0,137,8,1,0,0,0,138,139,5,115,0,0,139,140,5,
        116,0,0,140,141,5,114,0,0,141,142,5,105,0,0,142,143,5,110,0,0,143,
        144,5,103,0,0,144,10,1,0,0,0,145,146,5,114,0,0,146,147,5,101,0,0,
        147,148,5,116,0,0,148,149,5,117,0,0,149,150,5,114,0,0,150,151,5,
        110,0,0,151,12,1,0,0,0,152,153,5,118,0,0,153,154,5,97,0,0,154,155,
        5,114,0,0,155,14,1,0,0,0,156,157,5,100,0,0,157,158,5,121,0,0,158,
        159,5,110,0,0,159,160,5,97,0,0,160,161,5,109,0,0,161,162,5,105,0,
        0,162,163,5,99,0,0,163,16,1,0,0,0,164,165,5,102,0,0,165,166,5,117,
        0,0,166,167,5,110,0,0,167,168,5,99,0,0,168,18,1,0,0,0,169,170,5,
        102,0,0,170,171,5,111,0,0,171,172,5,114,0,0,172,20,1,0,0,0,173,174,
        5,117,0,0,174,175,5,110,0,0,175,176,5,116,0,0,176,177,5,105,0,0,
        177,178,5,108,0,0,178,22,1,0,0,0,179,180,5,98,0,0,180,181,5,121,
        0,0,181,24,1,0,0,0,182,183,5,98,0,0,183,184,5,114,0,0,184,185,5,
        101,0,0,185,186,5,97,0,0,186,187,5,107,0,0,187,26,1,0,0,0,188,189,
        5,99,0,0,189,190,5,111,0,0,190,191,5,110,0,0,191,192,5,116,0,0,192,
        193,5,105,0,0,193,194,5,110,0,0,194,195,5,117,0,0,195,196,5,101,
        0,0,196,28,1,0,0,0,197,198,5,105,0,0,198,199,5,102,0,0,199,30,1,
        0,0,0,200,201,5,101,0,0,201,202,5,108,0,0,202,203,5,115,0,0,203,
        204,5,101,0,0,204,32,1,0,0,0,205,206,5,101,0,0,206,207,5,108,0,0,
        207,208,5,105,0,0,208,209,5,102,0,0,209,34,1,0,0,0,210,211,5,98,
        0,0,211,212,5,101,0,0,212,213,5,103,0,0,213,214,5,105,0,0,214,215,
        5,110,0,0,215,36,1,0,0,0,216,217,5,101,0,0,217,218,5,110,0,0,218,
        219,5,100,0,0,219,38,1,0,0,0,220,221,5,43,0,0,221,40,1,0,0,0,222,
        223,5,45,0,0,223,42,1,0,0,0,224,225,5,42,0,0,225,44,1,0,0,0,226,
        227,5,47,0,0,227,46,1,0,0,0,228,229,5,37,0,0,229,48,1,0,0,0,230,
        231,5,110,0,0,231,232,5,111,0,0,232,233,5,116,0,0,233,50,1,0,0,0,
        234,235,5,97,0,0,235,236,5,110,0,0,236,237,5,100,0,0,237,52,1,0,
        0,0,238,239,5,111,0,0,239,240,5,114,0,0,240,54,1,0,0,0,241,242,5,
        61,0,0,242,56,1,0,0,0,243,244,5,60,0,0,244,245,5,45,0,0,245,58,1,
        0,0,0,246,247,5,33,0,0,247,248,5,61,0,0,248,60,1,0,0,0,249,250,5,
        60,0,0,250,62,1,0,0,0,251,252,5,60,0,0,252,253,5,61,0,0,253,64,1,
        0,0,0,254,255,5,62,0,0,255,66,1,0,0,0,256,257,5,62,0,0,257,258,5,
        61,0,0,258,68,1,0,0,0,259,260,5,46,0,0,260,261,5,46,0,0,261,262,
        5,46,0,0,262,70,1,0,0,0,263,264,5,61,0,0,264,265,5,61,0,0,265,72,
        1,0,0,0,266,267,5,40,0,0,267,74,1,0,0,0,268,269,5,41,0,0,269,76,
        1,0,0,0,270,271,5,91,0,0,271,78,1,0,0,0,272,273,5,93,0,0,273,80,
        1,0,0,0,274,275,5,44,0,0,275,82,1,0,0,0,276,280,7,0,0,0,277,279,
        7,1,0,0,278,277,1,0,0,0,279,282,1,0,0,0,280,278,1,0,0,0,280,281,
        1,0,0,0,281,84,1,0,0,0,282,280,1,0,0,0,283,285,7,2,0,0,284,283,1,
        0,0,0,285,286,1,0,0,0,286,284,1,0,0,0,286,287,1,0,0,0,287,86,1,0,
        0,0,288,292,5,46,0,0,289,291,7,2,0,0,290,289,1,0,0,0,291,294,1,0,
        0,0,292,290,1,0,0,0,292,293,1,0,0,0,293,88,1,0,0,0,294,292,1,0,0,
        0,295,297,7,3,0,0,296,298,7,4,0,0,297,296,1,0,0,0,297,298,1,0,0,
        0,298,300,1,0,0,0,299,301,7,2,0,0,300,299,1,0,0,0,301,302,1,0,0,
        0,302,300,1,0,0,0,302,303,1,0,0,0,303,90,1,0,0,0,304,306,3,85,42,
        0,305,307,3,87,43,0,306,305,1,0,0,0,306,307,1,0,0,0,307,309,1,0,
        0,0,308,310,3,89,44,0,309,308,1,0,0,0,309,310,1,0,0,0,310,92,1,0,
        0,0,311,316,8,5,0,0,312,316,3,95,47,0,313,314,5,39,0,0,314,316,5,
        34,0,0,315,311,1,0,0,0,315,312,1,0,0,0,315,313,1,0,0,0,316,94,1,
        0,0,0,317,318,5,92,0,0,318,319,7,6,0,0,319,96,1,0,0,0,320,324,5,
        34,0,0,321,323,3,93,46,0,322,321,1,0,0,0,323,326,1,0,0,0,324,322,
        1,0,0,0,324,325,1,0,0,0,325,327,1,0,0,0,326,324,1,0,0,0,327,328,
        5,34,0,0,328,329,6,48,0,0,329,98,1,0,0,0,330,331,5,10,0,0,331,100,
        1,0,0,0,332,333,5,35,0,0,333,334,5,35,0,0,334,338,1,0,0,0,335,337,
        8,7,0,0,336,335,1,0,0,0,337,340,1,0,0,0,338,336,1,0,0,0,338,339,
        1,0,0,0,339,341,1,0,0,0,340,338,1,0,0,0,341,342,6,50,1,0,342,102,
        1,0,0,0,343,345,7,8,0,0,344,343,1,0,0,0,345,346,1,0,0,0,346,344,
        1,0,0,0,346,347,1,0,0,0,347,348,1,0,0,0,348,349,6,51,1,0,349,104,
        1,0,0,0,350,351,5,13,0,0,351,352,1,0,0,0,352,353,6,52,1,0,353,106,
        1,0,0,0,354,358,5,34,0,0,355,357,3,93,46,0,356,355,1,0,0,0,357,360,
        1,0,0,0,358,356,1,0,0,0,358,359,1,0,0,0,359,364,1,0,0,0,360,358,
        1,0,0,0,361,365,7,9,0,0,362,363,5,13,0,0,363,365,5,10,0,0,364,361,
        1,0,0,0,364,362,1,0,0,0,365,366,1,0,0,0,366,367,6,53,2,0,367,108,
        1,0,0,0,368,369,5,92,0,0,369,370,8,6,0,0,370,110,1,0,0,0,371,375,
        5,34,0,0,372,374,3,93,46,0,373,372,1,0,0,0,374,377,1,0,0,0,375,373,
        1,0,0,0,375,376,1,0,0,0,376,378,1,0,0,0,377,375,1,0,0,0,378,379,
        3,109,54,0,379,380,6,55,3,0,380,112,1,0,0,0,381,382,9,0,0,0,382,
        383,6,56,4,0,383,114,1,0,0,0,15,0,280,286,292,297,302,306,309,315,
        324,338,346,358,364,375,5,1,48,0,6,0,0,1,53,1,1,55,2,1,56,3
    ]

class ZCodeLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    TRUE = 1
    FALSE = 2
    NUMBER = 3
    BOOL = 4
    STRING = 5
    RETURN = 6
    VAR = 7
    DYNAMIC = 8
    FUNC = 9
    FOR = 10
    UNTIL = 11
    BY = 12
    BREAK = 13
    CONTINUE = 14
    IF = 15
    ELSE = 16
    ELIF = 17
    BEGIN = 18
    END = 19
    ADD = 20
    SUB = 21
    MUL = 22
    DIV = 23
    MOD = 24
    NOT = 25
    AND = 26
    OR = 27
    EQUAL = 28
    ASSIGN = 29
    DIFF = 30
    LT = 31
    LTE = 32
    GT = 33
    GTE = 34
    CONCAT = 35
    COMPARE = 36
    LP = 37
    RP = 38
    LSB = 39
    RSB = 40
    COMMA = 41
    ID = 42
    NUMBER_LIT = 43
    STR_LIT = 44
    NEWLINE = 45
    COMMENTS = 46
    WS = 47
    CR = 48
    UNCLOSE_STRING = 49
    ILLEGAL_ESCAPE = 50
    ERROR_CHAR = 51

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'true'", "'false'", "'number'", "'bool'", "'string'", "'return'", 
            "'var'", "'dynamic'", "'func'", "'for'", "'until'", "'by'", 
            "'break'", "'continue'", "'if'", "'else'", "'elif'", "'begin'", 
            "'end'", "'+'", "'-'", "'*'", "'/'", "'%'", "'not'", "'and'", 
            "'or'", "'='", "'<-'", "'!='", "'<'", "'<='", "'>'", "'>='", 
            "'...'", "'=='", "'('", "')'", "'['", "']'", "','", "'\\n'", 
            "'\\r'" ]

    symbolicNames = [ "<INVALID>",
            "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", "VAR", 
            "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", "CONTINUE", 
            "IF", "ELSE", "ELIF", "BEGIN", "END", "ADD", "SUB", "MUL", "DIV", 
            "MOD", "NOT", "AND", "OR", "EQUAL", "ASSIGN", "DIFF", "LT", 
            "LTE", "GT", "GTE", "CONCAT", "COMPARE", "LP", "RP", "LSB", 
            "RSB", "COMMA", "ID", "NUMBER_LIT", "STR_LIT", "NEWLINE", "COMMENTS", 
            "WS", "CR", "UNCLOSE_STRING", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    ruleNames = [ "TRUE", "FALSE", "NUMBER", "BOOL", "STRING", "RETURN", 
                  "VAR", "DYNAMIC", "FUNC", "FOR", "UNTIL", "BY", "BREAK", 
                  "CONTINUE", "IF", "ELSE", "ELIF", "BEGIN", "END", "ADD", 
                  "SUB", "MUL", "DIV", "MOD", "NOT", "AND", "OR", "EQUAL", 
                  "ASSIGN", "DIFF", "LT", "LTE", "GT", "GTE", "CONCAT", 
                  "COMPARE", "LP", "RP", "LSB", "RSB", "COMMA", "ID", "INTERGER", 
                  "DECIMAL", "EXPONENT", "NUMBER_LIT", "STR_CHAR", "ESC_SEQ", 
                  "STR_LIT", "NEWLINE", "COMMENTS", "WS", "CR", "UNCLOSE_STRING", 
                  "ILLEGAL_ESC", "ILLEGAL_ESCAPE", "ERROR_CHAR" ]

    grammarFileName = "ZCode.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


    def action(self, localctx:RuleContext, ruleIndex:int, actionIndex:int):
        if self._actions is None:
            actions = dict()
            actions[48] = self.STR_LIT_action 
            actions[53] = self.UNCLOSE_STRING_action 
            actions[55] = self.ILLEGAL_ESCAPE_action 
            actions[56] = self.ERROR_CHAR_action 
            self._actions = actions
        action = self._actions.get(ruleIndex, None)
        if action is not None:
            action(localctx, actionIndex)
        else:
            raise Exception("No registered action for:" + str(ruleIndex))


    def STR_LIT_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 0:
            self.text = self.text[1:-1]
     

    def UNCLOSE_STRING_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 1:
            if self.text[-1] == '\n':
            	if self.text[-2] == '\r':
            		raise UncloseString(self.text[1:-2]);
            	else:
            		raise UncloseString(self.text[1:-1]);
            else:
            	raise UncloseString(self.text[1:]);

     

    def ILLEGAL_ESCAPE_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 2:
            raise IllegalEscape(self.text[1:])
     

    def ERROR_CHAR_action(self, localctx:RuleContext , actionIndex:int):
        if actionIndex == 3:
            raise ErrorToken(self.text)
     


